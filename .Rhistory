data <- read.csv(file.choose(), header = FALSE)
colnames(data) <- c('sample_code_number',
'clump_Thickness',
'uniformity_of_cell_size',
'uniformity_of_cell_shape',
'marginal_adhesion',
'single_epithelial_cell_size',
'bare_nuclei',
'bland_chromatin',
'normal_nucleoli',
'mitoses',
'class')
dim(data)
str(data)
ggplot(data = data, aes(class))+
geom_bar()
library(e1071)
library(caTools)
library(class)
library(ggplot2)
ggplot(data = data, aes(class))+
geom_bar()
data$bare_nuclei <- as.integer(data$bare_nuclei)
data <- na.omit(data)
dim(data)
set.seed(123)
split <- sample.split(data)
train <- subset(data, split == 'TRUE')
test <- subset(data, split == 'FALSE')
View(test)
knn_model <- knn(train = train[-11],test = test[-11], cl = train$class, k = 3)
cm <- table(test$class, knn_model)
cm
misClassError <- mean(knn_model != test$class)
print(paste('Accuracy =', 1-misClassError))
nb_model <- naiveBayes(class ~ ., data = train)
nb_model
prediction <- predict(nb_model, newdata = test[-11])
cm <- table(test$class, prediction)
cm
cm2 <- table(test$class, prediction)
cm2
correct_values <- cm[1,1]+cm[2,2]
total_values <- correct_values + cm[1,2] + cm[2,1]
acc <- correct_values/total_values
print(paste('Accuracy = ', acc))
ggplot(data = data, aes(class))+
geom_bar(fill = class)
ggplot(data = data, aes(class))+
geom_bar(fill = data$class)
ggplot(data = data, aes(class, fill = class))+
geom_bar()
ggplot(data = data, aes(class, fill = class))+
geom_bar()
ggplot(data = data, aes(class, col = class))+
geom_bar()
ggplot(data = data, aes(class, col = class))+
geom_bar()
ggplot(data = data, aes(class, fill = class))+
geom_bar()
ggplot(data = data, aes(class, fill = data$class))+
geom_bar()
ggplot(data = data, aes(class, fill = data$class))+
geom_bar()
ggplot(data = data, aes(class), fill = class)+
geom_bar()
ggplot(data = data, aes(class), fill = class)+
geom_bar()
ggplot(data = data, aes(class), col = class)+
geom_bar()
ggplot(data, aes(x = class, fill = class)) + geom_bar(stat = "count")
ggplot(data, aes(x = class, fill = class)) + geom_bar(stat = "count")
ggplot(data, aes(x = class, fill = class)) + geom_bar(stat = "count")
View(data)
ggplot(data, aes(x = class, fill = factor(class))) + geom_bar(stat = "count")
ggplot(data = data, aes(class, fill = factor(class)))+
geom_bar()
ggplot(data = data, aes(class, fill = factor(class)))+
geom_bar()
print(paste('Accuracy = ', acc))
library(caTools)
library(class)
library(ggplot2)
library(reshape2)
library(caret)
library(mlbench)
library(e1071)
# Loading the dataset and cheking the few rows.
data <- read.csv(file.choose())
head()
head()
# Loading the dataset and cheking the few rows.
data <- read.csv(file.choose())
head()
head(data)
#Adding header to data to increase readabilty.
colnames(data) <- c('sample_code_number',
'clump_Thickness',
'uniformity_of_cell_size',
'uniformity_of_cell_shape',
'marginal_adhesion',
'single_epithelial_cell_size',
'bare_nuclei',
'bland_chromatin',
'normal_nucleoli',
'mitoses',
'class')
# our data looks a bit more complex with no clear headers assigned
# lets make handle it first.
# Adding headers to data to increase readability.
colnames(data) <- c('sample_code_number',
'clump_Thickness',
'uniformity_of_cell_size',
'uniformity_of_cell_shape',
'marginal_adhesion',
'single_epithelial_cell_size',
'bare_nuclei',
'bland_chromatin',
'normal_nucleoli',
'mitoses',
'class')
#checking structure of dataset
summary(data)
#Converting bare_nuclei from character datatype to int.
data$bare_nuclei <- as.integer(data$bare_nuclei)
# Dropping all na values...
data <- na.omit(data)
# Dropping all na values from the dataset
data <- na.omit(data)
data$class
#
data$class <- ifelse(data$class == 2,0,1)
data$class
#doing train test split
set.seed(100)
split <- sample.split(data)
train <- subset(data, split == 'TRUE')
split
train <- subset(data, split == 'TRUE')
train_features <- train[-11]
test <- subset(data, split == 'FALSE')
test_features <- test[-11]
#
log_model <- glm(class ~ ., data = train, family = 'binomial')
summary(log_model)
predict_reg <- predict(log_model,
test_features, type = "response")
predict_reg
predict_reg <- ifelse(predict_reg >0.5, 1, 0)
table(test$class, predict_reg)
missing_classerr <- mean(predict_reg != test$class)
print(paste('Accuracy =', 1 - missing_classerr))
